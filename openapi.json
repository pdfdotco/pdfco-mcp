{
  "openapi": "3.0.1",
  "info": {
    "title": "PDF.co",
    "description": "",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.pdf.co/"
    }
  ],
  "tags": [
    {
      "name": "ai_invoice_parser",
      "description": ""
    },
    {
      "name": "barcode",
      "description": ""
    },
    {
      "name": "convert_to_pdf",
      "description": ""
    },
    {
      "name": "document_parser_api",
      "description": ""
    },
    {
      "name": "email",
      "description": ""
    },
    {
      "name": "file",
      "description": ""
    },
    {
      "name": "job",
      "description": ""
    },
    {
      "name": "pdf",
      "description": ""
    },
    {
      "name": "pdf_data_extraction",
      "description": ""
    },
    {
      "name": "pdf_edit",
      "description": ""
    },
    {
      "name": "pdf_to_image",
      "description": ""
    },
    {
      "name": "textsense",
      "description": ""
    },
    {
      "name": "url",
      "description": ""
    },
    {
      "name": "user",
      "description": ""
    },
    {
      "name": "xls",
      "description": ""
    }
  ],
  "paths": {
    "/v1/ai-invoice-parser": {
      "post": {
        "tags": [
          "ai_invoice_parser"
        ],
        "description": "Request AI Invoice parser",
        "operationId": "post_v1_ai-invoice-parser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "callback": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/barcode/generate": {
      "get": {
        "tags": [
          "barcode"
        ],
        "description": "Generate high quality printable and scannable barcodes as images or PDF. All popular types are supported from Code 39, Code 128 to QR Code, Datamatrix and PDF417.",
        "operationId": "get_v1_barcode_generate",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filename for the generated image.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Barcode value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Barcode type. Valid values: <code>Code128</code>, <code>Code39</code>, <code>Postnet</code>, <code>UPCA</code>, <code>EAN8</code>, <code>ISBN</code>, <code>Codabar</code>, <code>I2of5</code>, <code>Code93</code>, <code>EAN13</code>, <code>JAN13</code>, <code>Bookland</code>, <code>UPCE</code>, <code>PDF417</code>, <code>PDF417Truncated</code>, <code>DataMatrix</code>, <code>QRCode</code>, <code>Aztec</code>, <code>Planet</code>, <code>EAN128</code>, <code>GS1_128</code>, <code>USPSSackLabel</code>, <code>USPSTrayLabel</code>, <code>DeutschePostIdentcode</code>, <code>DeutschePostLeitcode</code>, <code>Numly</code>, <code>PZN</code>, <code>OpticalProduct</code>, <code>SwissPostParcel</code>, <code>RoyalMail</code>, <code>DutchKix</code>, <code>SingaporePostalCode</code>, <code>EAN2</code>, <code>EAN5</code>, <code>EAN14</code>, <code>MacroPDF417</code>, <code>MicroPDF417</code>, <code>GS1_DataMatrix</code>, <code>Telepen</code>, <code>IntelligentMail</code>, <code>GS1_DataBar_Omnidirectional</code>, <code>GS1_DataBar_Truncated, <code>GS1_DataBar_Stacked</code>, <code>GS1_DataBar_Stacked_Omnidirectional</code>, <code>GS1_DataBar_Limited, <code>GS1_DataBar_Expanded</code>, <code>GS1_DataBar_Expanded_Stacked</code>, <code>MaxiCode</code>, <code>Plessey</code>, <code>MSI</code>, <code>ITF14</code>, <code>GTIN12</code>, <code>GTIN8</code>, <code>GTIN13</code>, <code>GTIN14</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "decorationimage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "barcode"
        ],
        "description": "Generate high quality printable and scannable barcodes as images or PDF. All popular types are supported from Code 39, Code 128 to QR Code, Datamatrix and PDF417.",
        "operationId": "post_v1_barcode_generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Filename for the generated image."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "description": "Barcode value."
                  },
                  "type": {
                    "type": "string",
                    "description": "Barcode type. Valid values: <code>Code128</code>, <code>Code39</code>, <code>Postnet</code>, <code>UPCA</code>, <code>EAN8</code>, <code>ISBN</code>, <code>Codabar</code>, <code>I2of5</code>, <code>Code93</code>, <code>EAN13</code>, <code>JAN13</code>, <code>Bookland</code>, <code>UPCE</code>, <code>PDF417</code>, <code>PDF417Truncated</code>, <code>DataMatrix</code>, <code>QRCode</code>, <code>Aztec</code>, <code>Planet</code>, <code>EAN128</code>, <code>GS1_128</code>, <code>USPSSackLabel</code>, <code>USPSTrayLabel</code>, <code>DeutschePostIdentcode</code>, <code>DeutschePostLeitcode</code>, <code>Numly</code>, <code>PZN</code>, <code>OpticalProduct</code>, <code>SwissPostParcel</code>, <code>RoyalMail</code>, <code>DutchKix</code>, <code>SingaporePostalCode</code>, <code>EAN2</code>, <code>EAN5</code>, <code>EAN14</code>, <code>MacroPDF417</code>, <code>MicroPDF417</code>, <code>GS1_DataMatrix</code>, <code>Telepen</code>, <code>IntelligentMail</code>, <code>GS1_DataBar_Omnidirectional</code>, <code>GS1_DataBar_Truncated, <code>GS1_DataBar_Stacked</code>, <code>GS1_DataBar_Stacked_Omnidirectional</code>, <code>GS1_DataBar_Limited, <code>GS1_DataBar_Expanded</code>, <code>GS1_DataBar_Expanded_Stacked</code>, <code>MaxiCode</code>, <code>Plessey</code>, <code>MSI</code>, <code>ITF14</code>, <code>GTIN12</code>, <code>GTIN8</code>, <code>GTIN13</code>, <code>GTIN14</code>."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "decorationimage": {
                    "type": "string"
                  },
                  "profiles": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/barcode/read/from/url": {
      "get": {
        "tags": [
          "barcode"
        ],
        "description": "Read barcodes from images, tiff, pdf documents, scanned documents. All popular types of barcodes are supported from Code 39, Code 128 to QR Code, Datamatrix and PDF417. Supports noisy and damaged barcodes, scans, documents.",
        "operationId": "get_v1_barcode_read_from_url",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Comma-separated list of barcode types to decode. Valid types: <code>AustralianPostCode</code>, <code>Aztec</code>, <code>CircularI2of5</code>, <code>Codabar</code>, <code>CodablockF</code>, <code>Code128</code>, <code>Code16K</code>, <code>Code39</code>, <code>Code39Extended</code>, <code>Code39Mod43</code>, <code>Code39Mod43Extended</code>, <code>Code93</code>, <code>DataMatrix</code>, <code>EAN13</code>, <code>EAN2</code>, <code>EAN5</code>, <code>EAN8</code>, <code>GS1</code>, <code>GS1DataBarExpanded</code>, <code>GS1DataBarExpandedStacked</code>, <code>GS1DataBarLimited</code>, <code>GS1DataBarOmnidirectional</code>, <code>GS1DataBarStacked</code>, <code>GTIN12</code>, <code>GTIN13</code>, <code>GTIN14</code>, <code>GTIN8</code>, <code>IntelligentMail</code>, <code>Interleaved2of5</code>, <code>ITF14</code>, <code>MaxiCode</code>, <code>MICR</code>, <code>MicroPDF</code>, <code>MSI</code>, <code>PatchCode</code>, <code>PDF417</code>, <code>Pharmacode</code>, <code>PostNet</code>, <code>PZN</code>, <code>QRCode</code>, <code>RoyalMail</code>, <code>RoyalMailKIX</code>, <code>Trioptic</code>, <code>UPCA</code>, <code>UPCE</code>, <code>UPU</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source barcodes file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the image or pdf file to decode barcodes from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "barcode"
        ],
        "description": "Read barcodes from images, tiff, pdf documents, scanned documents. All popular types of barcodes are supported from Code 39, Code 128 to QR Code, Datamatrix and PDF417. Supports noisy and damaged barcodes, scans, documents.",
        "operationId": "post_v1_barcode_read_from_url",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "types": {
                    "type": "string",
                    "description": "Comma-separated list of barcode types to decode. Valid types: <code>AustralianPostCode</code>, <code>Aztec</code>, <code>CircularI2of5</code>, <code>Codabar</code>, <code>CodablockF</code>, <code>Code128</code>, <code>Code16K</code>, <code>Code39</code>, <code>Code39Extended</code>, <code>Code39Mod43</code>, <code>Code39Mod43Extended</code>, <code>Code93</code>, <code>DataMatrix</code>, <code>EAN13</code>, <code>EAN2</code>, <code>EAN5</code>, <code>EAN8</code>, <code>GS1</code>, <code>GS1DataBarExpanded</code>, <code>GS1DataBarExpandedStacked</code>, <code>GS1DataBarLimited</code>, <code>GS1DataBarOmnidirectional</code>, <code>GS1DataBarStacked</code>, <code>GTIN12</code>, <code>GTIN13</code>, <code>GTIN14</code>, <code>GTIN8</code>, <code>IntelligentMail</code>, <code>Interleaved2of5</code>, <code>ITF14</code>, <code>MaxiCode</code>, <code>MICR</code>, <code>MicroPDF</code>, <code>MSI</code>, <code>PatchCode</code>, <code>PDF417</code>, <code>Pharmacode</code>, <code>PostNet</code>, <code>PZN</code>, <code>QRCode</code>, <code>RoyalMail</code>, <code>RoyalMailKIX</code>, <code>Trioptic</code>, <code>UPCA</code>, <code>UPCE</code>, <code>UPU</code>."
                  },
                  "file": {
                    "type": "string",
                    "description": "Source barcodes file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the image or pdf file to decode barcodes from."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/xls/convert/to/pdf": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert XLS, XLSX, CSV spreadsheets into PDF",
        "operationId": "get_v1_xls_convert_to_pdf",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksheetindex",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autosize",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert XLS, XLSX, CSV spreadsheets into PDF",
        "operationId": "post_v1_xls_convert_to_pdf",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "worksheetindex": {
                    "type": "string"
                  },
                  "autosize": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/from/csv": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert CSV, XLS, XLSX to PDF conversion.",
        "operationId": "get_v1_pdf_convert_from_csv",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert CSV, XLS, XLSX to PDF conversion.",
        "operationId": "post_v1_pdf_convert_from_csv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/from/doc": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert DOC, DOCX, RTF, TXT, XPS files into PDF.",
        "operationId": "get_v1_pdf_convert_from_doc",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert DOC, DOCX, RTF, TXT, XPS files into PDF.",
        "operationId": "post_v1_pdf_convert_from_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/from/html": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert HTML code snippet into full featured PDF.",
        "operationId": "get_v1_pdf_convert_from_html",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "templatedata",
            "in": "query",
            "description": "please set to string converted from JSON with data for Mustache template or leave empty if no template is used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "html",
            "in": "query",
            "description": "HTML code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "margins",
            "in": "query",
            "description": "Page margins.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "papersize",
            "in": "query",
            "description": "Paper size.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orientation",
            "in": "query",
            "description": "Page orientation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "printbackground",
            "in": "query",
            "description": "Defines whether to print background images or not.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "header",
            "in": "query",
            "description": "Header template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "footer",
            "in": "query",
            "description": "Footer template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customscript",
            "in": "query",
            "description": "custom script to execute on page load",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediatype",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "donotwaitfullload",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "templateid",
            "in": "query",
            "description": "html template id (optional)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Convert HTML code snippet into full featured PDF.",
        "operationId": "post_v1_pdf_convert_from_html",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "templatedata": {
                    "type": "string",
                    "description": "please set to string converted from JSON with data for Mustache template or leave empty if no template is used"
                  },
                  "html": {
                    "type": "string",
                    "description": "HTML code."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "margins": {
                    "type": "string",
                    "description": "Page margins."
                  },
                  "papersize": {
                    "type": "string",
                    "description": "Paper size."
                  },
                  "orientation": {
                    "type": "string",
                    "description": "Page orientation."
                  },
                  "printbackground": {
                    "type": "string",
                    "description": "Defines whether to print background images or not.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "header": {
                    "type": "string",
                    "description": "Header template."
                  },
                  "footer": {
                    "type": "string",
                    "description": "Footer template."
                  },
                  "customscript": {
                    "type": "string",
                    "description": "custom script to execute on page load"
                  },
                  "mediatype": {
                    "type": "string"
                  },
                  "donotwaitfullload": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "templateid": {
                    "type": "number",
                    "description": "html template id (optional)"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/from/image": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Create PDF file from one or more JPG, PNG, TIF images.",
        "operationId": "get_v1_pdf_convert_from_image",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Create PDF file from one or more JPG, PNG, TIF images.",
        "operationId": "post_v1_pdf_convert_from_image",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/from/url": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Create a rich PDF copy of a website by passing URL link to the source.",
        "operationId": "get_v1_pdf_convert_from_url",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of the web page to be saved as PDF document.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "templatedata",
            "in": "query",
            "description": "JSON model which will be used for processing HTML template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "margins",
            "in": "query",
            "description": "Page margins.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "papersize",
            "in": "query",
            "description": "Paper size.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orientation",
            "in": "query",
            "description": "Page orientation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "printbackground",
            "in": "query",
            "description": "Defines whether to print background images or not.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "header",
            "in": "query",
            "description": "Header template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "footer",
            "in": "query",
            "description": "Footer template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customscript",
            "in": "query",
            "description": "custom script to execute on page load",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "donotwaitfullload",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "mediatype",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Create a rich PDF copy of a website by passing URL link to the source.",
        "operationId": "post_v1_pdf_convert_from_url",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "url"
                ],
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "templatedata": {
                    "type": "string",
                    "description": "JSON model which will be used for processing HTML template"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the web page to be saved as PDF document."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "margins": {
                    "type": "string",
                    "description": "Page margins."
                  },
                  "papersize": {
                    "type": "string",
                    "description": "Paper size."
                  },
                  "orientation": {
                    "type": "string",
                    "description": "Page orientation."
                  },
                  "printbackground": {
                    "type": "string",
                    "description": "Defines whether to print background images or not.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "header": {
                    "type": "string",
                    "description": "Header template."
                  },
                  "footer": {
                    "type": "string",
                    "description": "Footer template."
                  },
                  "customscript": {
                    "type": "string",
                    "description": "custom script to execute on page load"
                  },
                  "donotwaitfullload": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "mediatype": {
                    "type": "string"
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/from/email": {
      "get": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Create a rich PDF copy of a website by passing URL link to the source.",
        "operationId": "get_v1_pdf_convert_from_email",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the web page to be saved as PDF document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "margins",
            "in": "query",
            "description": "Page margins.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "papersize",
            "in": "query",
            "description": "Paper size.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orientation",
            "in": "query",
            "description": "Page orientation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "header",
            "in": "query",
            "description": "Header template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "footer",
            "in": "query",
            "description": "Footer template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "embedattachments",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "convertattachments",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "convert_to_pdf"
        ],
        "description": "Create a rich PDF copy of a website by passing URL link to the source.",
        "operationId": "post_v1_pdf_convert_from_email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the web page to be saved as PDF document."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "margins": {
                    "type": "string",
                    "description": "Page margins."
                  },
                  "papersize": {
                    "type": "string",
                    "description": "Paper size."
                  },
                  "orientation": {
                    "type": "string",
                    "description": "Page orientation."
                  },
                  "header": {
                    "type": "string",
                    "description": "Header template."
                  },
                  "footer": {
                    "type": "string",
                    "description": "Footer template."
                  },
                  "embedattachments": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "convertattachments": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/data/store": {
      "get": {
        "tags": [
          "data_store"
        ],
        "operationId": "get_v1_data_store",
        "parameters": [
          {
            "name": "jobid",
            "in": "query",
            "description": "Id of processing that was started asynchronously",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "data_store"
        ],
        "operationId": "post_v1_data_store",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "body",
                  "jobid"
                ],
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "Id of processing that was started asynchronously"
                  },
                  "body": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Data to be stored"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "data_store"
        ],
        "operationId": "delete_v1_data_store",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "jobid"
                ],
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "Id of processing that was started asynchronously"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/data/store/webhook": {
      "post": {
        "tags": [
          "data_store"
        ],
        "operationId": "post_v1_data_store_webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "jobid"
                ],
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "Id of processing that was started asynchronously"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/documentparser": {
      "get": {
        "tags": [
          "document_parser_api"
        ],
        "description": "Parses and gets data from document using previously prepared template",
        "operationId": "get_v1_pdf_documentparser",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "outputformat",
            "in": "query",
            "description": "Format of output File. Valid values: JSON, YAML, XML, CSV.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "generatecsvheaders",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "templateid",
            "in": "query",
            "description": "Translation missing: en.api.v1.description.document_parser.templateid",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "document_parser_api"
        ],
        "description": "Parses and gets data from document using previously prepared template",
        "operationId": "post_v1_pdf_documentparser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "template": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "outputformat": {
                    "type": "string",
                    "description": "Format of output File. Valid values: JSON, YAML, XML, CSV."
                  },
                  "generatecsvheaders": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "templateid": {
                    "type": "number",
                    "description": "Translation missing: en.api.v1.description.document_parser.templateid"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/documentparser/templates": {
      "get": {
        "tags": [
          "document_parser_templates"
        ],
        "description": "Document Parser templates list for current user",
        "operationId": "get_v1_documentparser_templates",
        "responses": {
          "401": {
            "description": "unauthorized",
            "content": {}
          }
        }
      }
    },
    "/v1/documentparser/templates/{id}": {
      "get": {
        "tags": [
          "document_parser_templates"
        ],
        "description": "Document parser template information",
        "operationId": "get_v1_documentparser_templates_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document parser template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "404": {
            "description": "record not found",
            "content": {}
          }
        }
      }
    },
    "/v1/documentparser/templates/{id}/update": {
      "post": {
        "tags": [
          "document_parser_templates"
        ],
        "description": "Document parser updates template by id",
        "operationId": "post_v1_documentparser_templates_id_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document parser template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "404": {
            "description": "record not found",
            "content": {}
          }
        }
      }
    },
    "/v1/email/send": {
      "get": {
        "tags": [
          "email"
        ],
        "operationId": "get_v1_email_send",
        "parameters": [
          {
            "name": "smtppassword",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtpusername",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtpserver",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replyto",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cc",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bcc",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bodytext",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bodyhtml",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtpport",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "email"
        ],
        "operationId": "post_v1_email_send",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "from",
                  "smtppassword",
                  "smtpserver",
                  "smtpusername",
                  "subject",
                  "to"
                ],
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "from": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  },
                  "replyto": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "bcc": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "bodytext": {
                    "type": "string"
                  },
                  "bodyhtml": {
                    "type": "string"
                  },
                  "smtpserver": {
                    "type": "string"
                  },
                  "smtpport": {
                    "type": "string"
                  },
                  "smtpusername": {
                    "type": "string"
                  },
                  "smtppassword": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/email/extract-attachments": {
      "get": {
        "tags": [
          "email"
        ],
        "description": "Extract attachments from EML or MSG File",
        "operationId": "get_v1_email_extract-attachments",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "email"
        ],
        "description": "Extract attachments from EML or MSG File",
        "operationId": "post_v1_email_extract-attachments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/email/decode": {
      "get": {
        "tags": [
          "email"
        ],
        "description": "Decode EML or MSG File",
        "operationId": "get_v1_email_decode",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "email"
        ],
        "description": "Decode EML or MSG File",
        "operationId": "post_v1_email_decode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/upload/url": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Downloads file from a source url and uploads it as a temporary file. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "get_v1_file_upload_url",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of the file to upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name the file will be stored with.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "description": "Downloads file from a source url and uploads it as a temporary file. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "post_v1_file_upload_url",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "url"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name the file will be stored with."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the file to upload."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/upload": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Uploads file as a temporary file. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "get_v1_file_upload",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source File.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name the file will be stored with.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "description": "Uploads file as a temporary file. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "post_v1_file_upload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name the file will be stored with."
                  },
                  "file": {
                    "type": "string",
                    "description": "Source File."
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/upload/base64": {
      "post": {
        "tags": [
          "file"
        ],
        "description": "Creates temporary file using base64 source data. You may use this temporary file URL with other API methods. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "post_v1_file_upload_base64",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name the file will be stored with."
                  },
                  "file": {
                    "type": "string",
                    "description": "Base64-encoded file bytes."
                  },
                  "permanent": {
                    "type": "string",
                    "description": "Store file permanently in the internal storage",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/hash": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Calculate and return MD5 hash of file by url. Commonly used to control if source document has been changed or not because every little change will cause hash string to differ as well.",
        "operationId": "get_v1_file_hash",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "description": "Calculate and return MD5 hash of file by url. Commonly used to control if source document has been changed or not because every little change will cause hash string to differ as well.",
        "operationId": "post_v1_file_hash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/delete": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Downloads file from a source url and uploads it as a temporary file. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "get_v1_file_delete",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of the file to upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "description": "Downloads file from a source url and uploads it as a temporary file. Temporary files are automatically permanently removed after 1 hour.",
        "operationId": "post_v1_file_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "url"
                ],
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the file to upload."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/download/{token}": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Download file using its token",
        "operationId": "get_v1_file_download_token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "asattachment",
            "in": "query",
            "description": "Download file as attachment or inline",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "link",
            "in": "query",
            "description": "Generate link only instead of download",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "description": "Download file using its token",
        "operationId": "post_v1_file_download_token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "asattachment": {
                    "type": "string",
                    "description": "Download file as attachment or inline",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "link": {
                    "type": "string",
                    "description": "Generate link only instead of download",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/options/{token}": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Get options of the file in internal storage",
        "operationId": "get_v1_file_options_token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "description": "Set sharing options of the file",
        "operationId": "post_v1_file_options_token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "accessmode"
                ],
                "type": "object",
                "properties": {
                  "accessmode": {
                    "type": "string",
                    "description": "Access mode for the file",
                    "enum": [
                      "access_private",
                      "access_public"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/file/all": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Get list of files stored in the internal permanent PDF.co Files storage",
        "operationId": "get_v1_file_all",
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      }
    },
    "/v1/templates/html": {
      "get": {
        "tags": [
          "html_templates"
        ],
        "description": "HTML templates list for current user",
        "operationId": "get_v1_templates_html",
        "responses": {
          "401": {
            "description": "unauthorized",
            "content": {}
          }
        }
      }
    },
    "/v1/templates/html/{id}/update": {
      "post": {
        "tags": [
          "html_templates"
        ],
        "description": "HTML template update by id",
        "operationId": "post_v1_templates_html_id_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "HTML template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "404": {
            "description": "record not found",
            "content": {}
          }
        }
      }
    },
    "/v1/templates/html/{id}": {
      "get": {
        "tags": [
          "html_templates"
        ],
        "description": "HTML template",
        "operationId": "get_v1_templates_html_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "HTML template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "404": {
            "description": "record not found",
            "content": {}
          }
        }
      }
    },
    "/v1/job/check": {
      "get": {
        "tags": [
          "job"
        ],
        "description": "Checks and returns status of a job that is running in background. Returns \"working\", \"failed\", \"aborted\", \"success\"",
        "operationId": "get_v1_job_check",
        "parameters": [
          {
            "name": "jobid",
            "in": "query",
            "description": "Id of processing that was started asynchronously",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "job"
        ],
        "description": "Checks and returns status of a job that is running in background. Returns \"working\", \"failed\", \"aborted\", \"success\"",
        "operationId": "post_v1_job_check",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "jobid"
                ],
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "Id of processing that was started asynchronously"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "force": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/merge": {
      "get": {
        "tags": [
          "pdf"
        ],
        "description": "Merges two PDF documents.",
        "operationId": "get_v1_pdf_merge",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "description": "Merges two PDF documents.",
        "operationId": "post_v1_pdf_merge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/merge2": {
      "get": {
        "tags": [
          "pdf"
        ],
        "description": "Merges two PDF documents.",
        "operationId": "get_v1_pdf_merge2",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "description": "Merges two PDF documents.",
        "operationId": "post_v1_pdf_merge2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/optimize": {
      "get": {
        "tags": [
          "pdf"
        ],
        "description": "Optimizes existing PDF file to reduce its file size",
        "operationId": "get_v1_pdf_optimize",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "description": "Optimizes existing PDF file to reduce its file size",
        "operationId": "post_v1_pdf_optimize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/split": {
      "get": {
        "tags": [
          "pdf"
        ],
        "description": "Split PDF document.",
        "operationId": "get_v1_pdf_split",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "description": "Split PDF document.",
        "operationId": "post_v1_pdf_split",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/split2": {
      "get": {
        "tags": [
          "pdf"
        ],
        "description": "Split PDF document.",
        "operationId": "get_v1_pdf_split2",
        "parameters": [
          {
            "name": "searchstring",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regexsearch",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "excludekeypages",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "casesensitive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "lang",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "description": "Split PDF document.",
        "operationId": "post_v1_pdf_split2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "searchstring"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "searchstring": {
                    "type": "string"
                  },
                  "regexsearch": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "excludekeypages": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "casesensitive": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "lang": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/info": {
      "get": {
        "tags": [
          "pdf"
        ],
        "description": "Gets PDF document information.",
        "operationId": "get_v1_pdf_info",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "description": "Gets PDF document information.",
        "operationId": "post_v1_pdf_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/info/fields": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_info_fields",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_info_fields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/find": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_find",
        "parameters": [
          {
            "name": "searchstring",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "casesensitive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "wordmatchingmode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regexsearch",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_find",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "searchstring"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "searchstring": {
                    "type": "string"
                  },
                  "casesensitive": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "wordmatchingmode": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "regexsearch": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/find/table": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_find_table",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_find_table",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/security/add": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_security_add",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerpassword",
            "in": "query",
            "description": "Owner password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userpassword",
            "in": "query",
            "description": "User password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encryptionalgorithm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowaccessibilitysupport",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "allowassemblydocument",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "allowprintdocument",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "allowfillforms",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "allowmodifydocument",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "allowcontentextraction",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "allowmodifyannotations",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "printquality",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_security_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "ownerpassword": {
                    "type": "string",
                    "description": "Owner password"
                  },
                  "userpassword": {
                    "type": "string",
                    "description": "User password"
                  },
                  "encryptionalgorithm": {
                    "type": "string"
                  },
                  "allowaccessibilitysupport": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "allowassemblydocument": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "allowprintdocument": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "allowfillforms": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "allowmodifydocument": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "allowcontentextraction": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "allowmodifyannotations": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "printquality": {
                    "type": "string"
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/security/remove": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_security_remove",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_security_remove",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "password": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/classifier": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_classifier",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rulescsv",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rulescsvurl",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "casesensitive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_classifier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "rulescsv": {
                    "type": "string"
                  },
                  "rulescsvurl": {
                    "type": "string"
                  },
                  "casesensitive": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/attachments/extract": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v1_pdf_attachments_extract",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v1_pdf_attachments_extract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/pdf/compress": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "get_v2_pdf_compress",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "post_v2_pdf_compress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "config": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "JSON string with additional parameters."
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/csv": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF, PNG, JPG to CSV. Automatically preserves the original layout of tables, rows, columns.",
        "operationId": "get_v1_pdf_convert_to_csv",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF, PNG, JPG to CSV. Automatically preserves the original layout of tables, rows, columns.",
        "operationId": "post_v1_pdf_convert_to_csv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/html": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PDF, PNG, JPG to HTML conversion. Automatically preserves the original visual layout, vectors, images, formatting.",
        "operationId": "get_v1_pdf_convert_to_html",
        "parameters": [
          {
            "name": "simple",
            "in": "query",
            "description": "Set <code>true</code> to convert to a plain HTML format. Default is the rich HTML & CSS format keeping the document design.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "columns",
            "in": "query",
            "description": "Set <code>true</code> if the PDF document is arranged in columns like a newspaper. Default is <code>false</code>.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "rect",
            "in": "query",
            "description": "optional rectangle area to extract from on a given page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PDF, PNG, JPG to HTML conversion. Automatically preserves the original visual layout, vectors, images, formatting.",
        "operationId": "post_v1_pdf_convert_to_html",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "simple": {
                    "type": "string",
                    "description": "Set <code>true</code> to convert to a plain HTML format. Default is the rich HTML & CSS format keeping the document design.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "columns": {
                    "type": "string",
                    "description": "Set <code>true</code> if the PDF document is arranged in columns like a newspaper. Default is <code>false</code>.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "rect": {
                    "type": "string",
                    "description": "optional rectangle area to extract from on a given page"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/json": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF to JSON. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "get_v1_pdf_convert_to_json",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF to JSON. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "post_v1_pdf_convert_to_json",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/json2": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF to JSON. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "get_v1_pdf_convert_to_json2",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF to JSON. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "post_v1_pdf_convert_to_json2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/json-meta": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF to JSON. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "get_v1_pdf_convert_to_json-meta",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Extracts data from PDF to JSON. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "post_v1_pdf_convert_to_json-meta",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/text": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to TEXT conversion. Automatically preserves the original text layout. Restores damaged and scanned text.",
        "operationId": "get_v1_pdf_convert_to_text",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to TEXT conversion. Automatically preserves the original text layout. Restores damaged and scanned text.",
        "operationId": "post_v1_pdf_convert_to_text",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/text-simple": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Pdf to text (simple and fast)",
        "operationId": "get_v1_pdf_convert_to_text-simple",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lineending",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "Pdf to text (simple and fast)",
        "operationId": "post_v1_pdf_convert_to_text-simple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lineending": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/xls": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to XLS conversion. Automatically preserves the original layout of tables, rows, columns, font styles, font size, colors",
        "operationId": "get_v1_pdf_convert_to_xls",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to XLS conversion. Automatically preserves the original layout of tables, rows, columns, font styles, font size, colors",
        "operationId": "post_v1_pdf_convert_to_xls",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/xlsx": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to XLSX conversion. Automatically preserves the original layout of tables, rows, columns, font styles, font size, colors",
        "operationId": "get_v1_pdf_convert_to_xlsx",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to XLSX conversion. Automatically preserves the original layout of tables, rows, columns, font styles, font size, colors",
        "operationId": "post_v1_pdf_convert_to_xlsx",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/xml": {
      "get": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to XML conversion. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "get_v1_pdf_convert_to_xml",
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linegrouping",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_data_extraction"
        ],
        "description": "PDF, PNG, JPG to XML conversion. Automatically preserves the original layout of tables, rows, columns. Includes information about coordinates, fonts, font size and styles.",
        "operationId": "post_v1_pdf_convert_to_xml",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "linegrouping": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/makesearchable": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "description": "Turns scanned pdf file into text searchable pdf file",
        "operationId": "get_v1_pdf_makesearchable",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "description": "Turns scanned pdf file into text searchable pdf file",
        "operationId": "post_v1_pdf_makesearchable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "lang": {
                    "type": "string",
                    "description": "Language for OCR (character recognition) when PDF is scanned. can be eng, fra, spa, deu, eng+deu or another."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/makeunsearchable": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "get_v1_pdf_makeunsearchable",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "post_v1_pdf_makeunsearchable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/add": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "description": "Adds text and images to existing pdf file",
        "operationId": "get_v1_pdf_edit_add",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "templatedata",
            "in": "query",
            "description": "please set to string converted from JSON with data for Mustache template or leave empty if no template is used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "x",
            "in": "query",
            "description": "X coordinate of the signature in PDF Points (1/72 in.).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y",
            "in": "query",
            "description": "Y coordinate of the signature in PDF Points (1/72 in.).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of the signature in PDF Points (1/72 in.).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of the signature in PDF Points (1/72 in.).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "defines content type to add. 'image' by default, set to 'annotation' to add text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "urlimage",
            "in": "query",
            "description": "URL of the signature image file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Font size.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transparent",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "fontname",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "annotationsstring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imagesstring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldsstring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "images",
            "in": "query",
            "description": "Image signatures to add.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "annotations",
            "in": "query",
            "description": "Annotation (textual) signatures to add.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "description": "Adds text and images to existing pdf file",
        "operationId": "post_v1_pdf_edit_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "templatedata": {
                    "type": "string",
                    "description": "please set to string converted from JSON with data for Mustache template or leave empty if no template is used"
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "x": {
                    "type": "string",
                    "description": "X coordinate of the signature in PDF Points (1/72 in.)."
                  },
                  "y": {
                    "type": "string",
                    "description": "Y coordinate of the signature in PDF Points (1/72 in.)."
                  },
                  "width": {
                    "type": "string",
                    "description": "Width of the signature in PDF Points (1/72 in.)."
                  },
                  "height": {
                    "type": "string",
                    "description": "Height of the signature in PDF Points (1/72 in.)."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "password": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "description": "defines content type to add. 'image' by default, set to 'annotation' to add text"
                  },
                  "urlimage": {
                    "type": "string",
                    "description": "URL of the signature image file."
                  },
                  "text": {
                    "type": "string"
                  },
                  "size": {
                    "type": "string",
                    "description": "Font size."
                  },
                  "color": {
                    "type": "string"
                  },
                  "transparent": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "fontname": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "annotationsstring": {
                    "type": "string"
                  },
                  "imagesstring": {
                    "type": "string"
                  },
                  "fieldsstring": {
                    "type": "string"
                  },
                  "images": {
                    "type": "array",
                    "description": "Image signatures to add.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "annotations": {
                    "type": "array",
                    "description": "Annotation (textual) signatures to add.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/rotate": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "get_v1_pdf_edit_rotate",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "angle",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "post_v1_pdf_edit_rotate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "pages": {
                    "type": "string"
                  },
                  "angle": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/rotate/auto": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "get_v1_pdf_edit_rotate_auto",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "lang",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "post_v1_pdf_edit_rotate_auto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "lang": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/delete-pages": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "description": "Delete pages from PDF document.",
        "operationId": "get_v1_pdf_edit_delete-pages",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "description": "Delete pages from PDF document.",
        "operationId": "post_v1_pdf_edit_delete-pages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/replace-text": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "get_v1_pdf_edit_replace-text",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regex",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "searchstrings",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchstring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacestrings",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "replacestring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacementlimit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "casesensitive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "makeunsearchable",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "post_v1_pdf_edit_replace-text",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "regex": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "searchstrings": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "searchstring": {
                    "type": "string"
                  },
                  "replacestrings": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "replacestring": {
                    "type": "string"
                  },
                  "replacementlimit": {
                    "type": "number"
                  },
                  "casesensitive": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "makeunsearchable": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/delete-text": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "get_v1_pdf_edit_delete-text",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regex",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "searchstrings",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchstring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacementlimit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "casesensitive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "makeunsearchable",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "post_v1_pdf_edit_delete-text",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "regex": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "searchstrings": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "searchstring": {
                    "type": "string"
                  },
                  "replacementlimit": {
                    "type": "number"
                  },
                  "casesensitive": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "makeunsearchable": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/edit/replace-text-with-image": {
      "get": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "get_v1_pdf_edit_replace-text-with-image",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regex",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "searchstring",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replaceimage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacementlimit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "casesensitive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "makeunsearchable",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_edit"
        ],
        "operationId": "post_v1_pdf_edit_replace-text-with-image",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "regex": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "searchstring": {
                    "type": "string"
                  },
                  "replaceimage": {
                    "type": "string"
                  },
                  "replacementlimit": {
                    "type": "number"
                  },
                  "casesensitive": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "makeunsearchable": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/jpg": {
      "get": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to JPEG conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "get_v1_pdf_convert_to_jpg",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to JPEG conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "post_v1_pdf_convert_to_jpg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/png": {
      "get": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to PNG conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "get_v1_pdf_convert_to_png",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to PNG conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "post_v1_pdf_convert_to_png",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/webp": {
      "get": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to PNG conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "get_v1_pdf_convert_to_webp",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to PNG conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "post_v1_pdf_convert_to_webp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "inline": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/pdf/convert/to/tiff": {
      "get": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to high quality TIFF images conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "get_v1_pdf_convert_to_tiff",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password of PDF file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unwrap",
            "in": "query",
            "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE",
                ""
              ]
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "pdf_to_image"
        ],
        "description": "PDF to high quality TIFF images conversion. High quality rendering. Also works great for thumbnails generation and previews.",
        "operationId": "post_v1_pdf_convert_to_tiff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of PDF file"
                  },
                  "rect": {
                    "type": "string"
                  },
                  "unwrap": {
                    "type": "string",
                    "description": "Unwrap lines into a single line within table cells when <code>lineGrouping</code> is enabled.",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE",
                      ""
                    ]
                  },
                  "pages": {
                    "type": "string",
                    "description": "Comma-separated list of page indices (or ranges) to process. IMPORTANT: the very first page starts at <code>0</code> (zero). To set a range use the dash <code>-</code>, for example: <code>0,2-5,7-</code>. To set a range from index to the last page use range like this: <code>2-</code> (from page #3 as the index starts at zero and till the of the document). For ALL pages just leave this param empty. Example: <code>0,2-5,7-</code> means first page, then 3rd page to 6th page, and then  the range from 8th (index = <code>7</code>) page till the end of the document."
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/textsense/job/build": {
      "post": {
        "tags": [
          "textsense"
        ],
        "description": "Request build job",
        "operationId": "post_v1_textsense_job_build",
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      }
    },
    "/v1/account/credit/balance": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Returns remaining credits",
        "operationId": "get_v1_account_credit_balance",
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "description": "Returns remaining credits",
        "operationId": "post_v1_account_credit_balance",
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      }
    },
    "/v1/xls/convert/to/csv": {
      "get": {
        "tags": [
          "xls"
        ],
        "description": "Convert XLS into CSV comma separated values file",
        "operationId": "get_v1_xls_convert_to_csv",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quotationsymbol",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "separatorsymbol",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksheetindex",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "xls"
        ],
        "description": "Convert XLS into CSV comma separated values file",
        "operationId": "post_v1_xls_convert_to_csv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "quotationsymbol": {
                    "type": "string"
                  },
                  "separatorsymbol": {
                    "type": "string"
                  },
                  "worksheetindex": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/xls/convert/to/html": {
      "get": {
        "tags": [
          "xls"
        ],
        "description": "Convert XLS into HTML",
        "operationId": "get_v1_xls_convert_to_html",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksheetindex",
            "in": "query",
            "description": "Translation missing: en.api.v1.description.xls.worksheetindex",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "xls"
        ],
        "description": "Convert XLS into HTML",
        "operationId": "post_v1_xls_convert_to_html",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "worksheetindex": {
                    "type": "string",
                    "description": "Translation missing: en.api.v1.description.xls.worksheetindex"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/xls/convert/to/json": {
      "get": {
        "tags": [
          "xls"
        ],
        "description": "Convert XLS into JSON data file",
        "operationId": "get_v1_xls_convert_to_json",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksheetindex",
            "in": "query",
            "description": "Translation missing: en.api.v1.description.xls.worksheetindex",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "xls"
        ],
        "description": "Convert XLS into JSON data file",
        "operationId": "post_v1_xls_convert_to_json",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "worksheetindex": {
                    "type": "string",
                    "description": "Translation missing: en.api.v1.description.xls.worksheetindex"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/xls/convert/to/txt": {
      "get": {
        "tags": [
          "xls"
        ],
        "operationId": "get_v1_xls_convert_to_txt",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksheetindex",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "xls"
        ],
        "operationId": "post_v1_xls_convert_to_txt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "worksheetindex": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/xls/convert/to/xml": {
      "get": {
        "tags": [
          "xls"
        ],
        "operationId": "get_v1_xls_convert_to_xml",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "true",
                "false",
                "TRUE",
                "FALSE"
              ]
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "URL of the source PDF file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "File name for generated output.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksheetindex",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for output links in seconds",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "expiration for output links (if any) in minutes. default expiration is 1 hour.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpusername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httppassword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "xls"
        ],
        "operationId": "post_v1_xls_convert_to_xml",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "async": {
                    "type": "string",
                    "description": "Runs processing asynchronously. Returns Use <code>JobId</code> that you may use with <code>/job/check</code> to check state of the processing (possible states: <code>working</code>, <code>failed</code>, <code>aborted</code> and <code>success</code>)",
                    "enum": [
                      "true",
                      "false",
                      "TRUE",
                      "FALSE"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "description": "Source PDF file."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the source PDF file."
                  },
                  "name": {
                    "type": "string",
                    "description": "File name for generated output."
                  },
                  "worksheetindex": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Timeout for output links in seconds"
                  },
                  "expiration": {
                    "type": "number",
                    "description": "expiration for output links (if any) in minutes. default expiration is 1 hour."
                  },
                  "profiles": {
                    "type": "string"
                  },
                  "httpusername": {
                    "type": "string"
                  },
                  "httppassword": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "400": {
            "description": "bad input parameters",
            "content": {}
          },
          "401": {
            "description": "unauthorized",
            "content": {}
          },
          "403": {
            "description": "not enough credits",
            "content": {}
          },
          "405": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          },
          "408": {
            "description": "Timeout error. Input was too large to process in 30 secs, the connection was bad or input file was not available. For links to G Drive, G Docs, Dropbox or similar: they can limit access. To solve put 'cache:' before the link and try again. Also there is PDF.co built-in file storage at https://app.pdf.co/files stable and fast. If you use API directly then try 'async' mode (set 'async' to 'true') so it will create background job. Check the job status with '/job/check?jobId=<jobId>'. For pdf with lot of pages try to specify a page range using 'pages' param (get page count with '/pdf/info' endpoint). If you use Zapier then turn on 'Autoreply' to autoretry.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {},
  "x-original-swagger-version": "2.0"
}